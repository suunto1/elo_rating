<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles_pilots.css">
    <title>Pilots Information</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
</head>
<body>
    <div class="menu">
        <a href="/pilots">Pilot Rating Table</a>
        <a href="/new-participants">User Growth Statistics</a>
        <a href="/tracks">Track Records</a>
    </div>
   
    <div class="header-container">
        <h2>КМАМК pilots</h2>
        <div class="search-container">
            <input type="text" id="search-input" placeholder="Search for pilots...">
        </div>
    </div>

    <div class="container">
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Position</th>
                        <th>Name</th>
                        <th>ELO Rating</th>
                        <th>Races</th>
                        <th>Avg change</th>
                    </tr>
                </thead>
                <tbody>
                    <% pilots.forEach((pilot, index) => { %>
                        <tr data-pilot="<%= pilot.Name %>">
                            <td><%= index + 1 %></td>
                            <td class="pilot-name"><%= pilot.Name %></td>
                            <td><%= pilot.EloRanking %></td>
                            <td><%= pilot.RaceCount %></td>
                            <td><%= pilot.AverageChange.toFixed(2) %></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>

        <div id="chart-container">
            <div id="pilot-name"></div>
            <canvas id="eloChart"></canvas>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('search-input');
            const rows = document.querySelectorAll('tbody tr');
            const pilotNameDiv = document.getElementById('pilot-name');
            const ctx = document.getElementById('eloChart').getContext('2d');
            let eloChart;
    
            // Функция для фильтрации строк таблицы на основе поиска
            searchInput.addEventListener('input', function () {
                const searchText = searchInput.value.toLowerCase();
    
                rows.forEach(row => {
                    const pilotName = row.getAttribute('data-pilot').toLowerCase();
                    if (pilotName.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
    
            // Функция для отображения текста по центру графика
            function displayCenterText(chart, text) {
                const width = chart.width;
                const height = chart.height;
                const ctx = chart.ctx;
                ctx.save();
                ctx.clearRect(0, 0, width, height); // Очистить график перед отрисовкой текста
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = '#ffffff'; // Цвет текста
                ctx.font = '16px Arial'; // Шрифт и размер текста
                ctx.fillText(text, width / 2, height / 2);
                ctx.restore();
            }
    
            // Создаем пустой график
            eloChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [], // Начально пустой график
                    datasets: []
                },
                options: {
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Time'
                            }
                        },
                        y: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Elo Rating'
                            }
                        }
                    },
                    plugins: {
                        afterDraw: function (chart) {
                            if (chart.data.datasets.length === 0) {
                                displayCenterText(chart, 'Click on the pilot to display the Elo rating');
                            }
                        }
                    }
                }
            });
    
            // Обновление данных графика при выборе пилота
            function updateChartData(data) {
                eloChart.data.labels = data.labels;
                eloChart.data.datasets = data.datasets;
    
                // Убираем текст по центру, если данные обновлены
                if (eloChart.data.datasets.length > 0) {
                    eloChart.options.plugins.afterDraw = null; // Отключаем плагин, чтобы текст не отображался
                    ctx.clearRect(0, 0, eloChart.width, eloChart.height); // Очистить график перед обновлением
                }
    
                // Обновляем график
                eloChart.update();
            }
    
            rows.forEach(row => {
                row.addEventListener('click', async function () {
                    // Убираем класс selected у всех строк
                    rows.forEach(r => r.classList.remove('selected'));
    
                    // Добавляем класс selected к текущей строке
                    this.classList.add('selected');
    
                    const pilotName = this.getAttribute('data-pilot');
                    pilotNameDiv.textContent = pilotName;
    
                    try {
                        console.log(`Fetching data for pilot: ${pilotName}`);
                        const response = await fetch(`/pilot/${encodeURIComponent(pilotName)}`);
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        const raceData = await response.json();
                        console.log('Race data:', raceData);
    
                        const labels = [];
                        const data = [];
    
                        raceData.forEach(race => {
                            const date = new Date(race.Date);
                            labels.push(date.toLocaleDateString('en-CA')); // Корректное отображение даты в формате YYYY-MM-DD
                            data.push(race.CumulativeElo);
                        });
    
                        console.log('Labels:', labels);
                        console.log('Data:', data);
    
                        updateChartData({
                            labels: labels,
                            datasets: [{
                                label: 'ELO Rating',
                                data: data,
                                borderColor: '#009879', // Изменяем цвет кривой на #009879
                                borderWidth: 2,
                                fill: false
                            }]
                        });
                    } catch (error) {
                        console.error('Error fetching race data:', error);
                    }
                });
            });
    
            // Отображаем текст по центру, если график пустой при загрузке страницы
            if (eloChart.data.datasets.length === 0) {
                displayCenterText(eloChart, 'Click on the pilot to display the Elo rating');
            }
        });
    </script>
    
    <script>
        // Получаем текущий URL
        var currentUrl = window.location.pathname;
    
        // Функция для добавления класса active к соответствующему пункту меню
        function setActiveMenuItem() {
            var menuItems = document.querySelectorAll('.menu a');
            menuItems.forEach(function(item) {
                if (item.getAttribute('href') === currentUrl) {
                    item.classList.add('active');
                }
            });
        }
    
        // Вызываем функцию при загрузке страницы
        window.onload = setActiveMenuItem;
    </script>
</body>
</html>
