<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Caprasimo&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Roboto:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="/styles_profile.css">
    <link rel="icon" href="/favicon.png" type="image/png" />
    <title>КМАМК Sim Racing</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs/plugin/utc"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs/plugin/timezone"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-dayjs"></script>
    <script>
        dayjs.extend(dayjs.plugin.utc);
        dayjs.extend(dayjs.plugin.timezone);
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.33/moment-timezone-with-data.min.js"></script>

    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/locale/uk.js'></script>
</head>
</head>

<body>
    <%- include('partials/menu') %>

        <div class="main-content-wrapper">
            <aside class="sidebar-left"></aside>
            <main class="profile-main">
                <div class="profile-background-section">
                    <h2>Профiль</h2>

                    <div class="hall-of-fame-wrapper">
                        <div class="hall-of-fame-column">
                            <div class="profile-card hall-of-fame-category">
                                <div class="profile-header">
                                    <div class="profile-avatar-container">
                                        <img id="profile-avatar" src="<%= user.PhotoPath %>" alt="Аватар пилота">
                                        <button id="upload-avatar-btn" class="upload-btn">Завантажити</button>
                                        <input type="file" id="avatar-input" accept="image/*" style="display: none;">
                                        <% const defaultAvatarPath='/avatars/default_avatar_64.png' ; %>
                                            <% if (user.PhotoPath && user.PhotoPath !==defaultAvatarPath) { %>
                                                <button id="delete-avatar-btn" class="delete-btn">Видалити</button>
                                                <% } %>
                                    </div>
                                    <div class="profile-title">
                                        <h2>
                                            <%= user.username %>
                                        </h2>
                                    </div>
                                </div>

                                <div class="profile-section">
                                    <form id="profile-form">
                                        <div class="form-group">
                                            <label for="iRacingCustomerId">iRacing Customer ID</label>
                                            <input type="text" id="iRacingCustomerId" name="iRacingCustomerId"
                                                value="<%= user.iRacingCustomerId || '' %>" pattern="[0-9]*"
                                                title="Повинно містити лише цифри">
                                        </div>
                                        <div class="form-group">
                                            <label for="LMUName">LMU Name</label>
                                            <input type="text" id="LMUName" name="LMUName"
                                                value="<%= user.LMUName || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="DiscordId">Discord ID</label>
                                            <input type="text" id="DiscordId" name="DiscordId"
                                                value="<%= user.DiscordId || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="YoutubeChannel">YouTube Channel URL</label>
                                            <input type="url" id="YoutubeChannel" name="YoutubeChannel"
                                                value="<%= user.YoutubeChannel || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="TwitchChannel">Twitch Channel URL</label>
                                            <input type="url" id="TwitchChannel" name="TwitchChannel"
                                                value="<%= user.TwitchChannel || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="Instagram">Instagram URL</label>
                                            <input type="url" id="Instagram" name="Instagram"
                                                value="<%= user.Instagram || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="Country">Країна</label>
                                            <input type="text" id="Country" name="Country"
                                                value="<%= user.Country || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="Twitter">Twitter URL</label>
                                            <input type="url" id="Twitter" name="Twitter"
                                                value="<%= user.Twitter || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="City">Мiсто / Село</label>
                                            <input type="text" id="City" name="City" value="<%= user.City || '' %>">
                                        </div>
                                        <div class="form-group">
                                            <label for="TeamUUID">Учасник команди</label>
                                            <select id="TeamUUID" name="TeamUUID">
                                                <option value="">-- Вибрати --</option>
                                                <% teams.forEach(function(team) { %>
                                                    <option value="<%= team.UUID %>" <%=user.TeamUUID===team.UUID
                                                        ? 'selected' : '' %>>
                                                        <%= team.Name %>
                                                    </option>
                                                    <% }); %>
                                            </select>
                                        </div>
                                        <div class="form-group checkbox-group">
                                            <input type="checkbox" id="IsTeamInterested" name="IsTeamInterested"
                                                <%=user.IsTeamInterested ? 'checked' : '' %>
                                            <%= user.TeamUUID ? 'disabled' : '' %>> <label
                                                    for="IsTeamInterested">Зацікавлений у створенні команди / Приєднанні
                                                    до існуючої команди</label>
                                        </div>
                                        <button type="submit" class="save-btn">Зберегти</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </main>
            <aside class="sidebar-right"></aside>
        </div>

        <%- include('partials/footer') %>

            <script>
                // Обертываем весь ваш JavaScript код в событие DOMContentLoaded
                // Это гарантирует, что скрипт выполнится только после того, как весь HTML документа будет загружен.
                document.addEventListener('DOMContentLoaded', () => {
                    // dayjs.extend(dayjs.plugin.utc); // Эти строки можно убрать, так как они уже в <head>
                    // dayjs.extend(dayjs.plugin.timezone); // Аналогично

                    const currentUserId = "<%= user.id %>";
                    const form = document.getElementById('profile-form');
                    const profileAvatar = document.getElementById('profile-avatar');
                    const uploadAvatarBtn = document.getElementById('upload-avatar-btn');
                    const avatarInput = document.getElementById('avatar-input');
                    const teamUUIDSelect = document.getElementById('TeamUUID');
                    const isTeamInterestedCheckbox = document.getElementById('IsTeamInterested');
                    const DEFAULT_AVATAR_PATH = '/avatars/default_avatar_64.png';

                    // Добавляем проверку, что форма была найдена
                    if (!form) {
                        console.error('Ошибка: Форма с ID "profile-form" не найдена в DOM!');
                        return; // Прекращаем выполнение скрипта, если форма не найдена
                    }

                    function updateDeleteButtonVisibility() {
                        const deleteAvatarBtn = document.getElementById('delete-avatar-btn');
                        const isDefaultAvatar = profileAvatar.src.includes(DEFAULT_AVATAR_PATH); // Проверка на относительный путь

                        if (isDefaultAvatar) {
                            if (deleteAvatarBtn) {
                                deleteAvatarBtn.style.display = 'none';
                            }
                        } else {
                            if (deleteAvatarBtn) {
                                deleteAvatarBtn.style.display = 'inline-block';
                            } else {
                                console.error('Ошибка: Аватар не дефолтный, но кнопка удаления аватара не найдена в DOM.');
                                // Можно добавить alert, если хотите уведомить пользователя, но не перезагружать
                                alert('Произошла ошибка при отображении кнопки удаления аватара.');
                            }
                        }
                    }

                    updateDeleteButtonVisibility();

                    function updateIsTeamInterestedState() {
                        if (teamUUIDSelect.value) {
                            isTeamInterestedCheckbox.checked = false;
                            isTeamInterestedCheckbox.disabled = true;
                        } else {
                            isTeamInterestedCheckbox.disabled = false;
                        }
                    }

                    updateIsTeamInterestedState();

                    teamUUIDSelect.addEventListener('change', updateIsTeamInterestedState);

                    form.addEventListener('submit', async (e) => {
                        e.preventDefault(); // Это предотвращает стандартную отправку формы и перезагрузку страницы
                        console.log('Кнопка "Зберегти" нажата. Обработчик submit запущен.'); // Лог для отладки

                        const iRacingCustomerIdInput = document.getElementById('iRacingCustomerId');
                        let clientErrorMessage = '';

                        // Проверка на корректность ввода iRacingCustomerId
                        if (iRacingCustomerIdInput.value && !/^[0-9]+$/.test(iRacingCustomerIdInput.value)) {
                            clientErrorMessage += 'Поле "iRacing Customer ID" повинно містити лише цифри\n';
                        }

                        if (clientErrorMessage) {
                            alert(clientErrorMessage);
                            return; // Останавливаем выполнение, если есть ошибки валидации на клиенте
                        }

                        const formData = {
                            LMUName: document.getElementById('LMUName').value,
                            DiscordId: document.getElementById('DiscordId').value,
                            YoutubeChannel: document.getElementById('YoutubeChannel').value,
                            TwitchChannel: document.getElementById('TwitchChannel').value,
                            Instagram: document.getElementById('Instagram').value,
                            Twitter: document.getElementById('Twitter').value,
                            iRacingCustomerId: iRacingCustomerIdInput.value,
                            Country: document.getElementById('Country').value,
                            City: document.getElementById('City').value,
                            TeamUUID: teamUUIDSelect.value || '', // Изменено на пустую строку, если TeamUUID не выбран
                            IsTeamInterested: isTeamInterestedCheckbox.checked
                        };

                        console.log('Отправляемые данные формы:', formData); // Лог для проверки данных перед отправкой

                        try {
                            const response = await fetch(`/profile/update`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify(formData),
                                credentials: 'include' // Это важно для отправки кукисов (сессии)
                            });

                            const data = await response.json(); // Ожидаем JSON ответ

                            if (response.ok) { // Проверяем, был ли статус ответа 2xx (успешно)
                                alert(data.message);
                                location.reload(); // Перезагружаем страницу, чтобы отобразить обновленные данные
                            } else {
                                // Если сервер вернул ошибку (например, 400, 401, 500)
                                console.error('Ошибка от сервера при обновлении профиля:', data.message || response.statusText);
                                alert('Помилка: ' + (data.message || 'Неизвестная ошибка'));
                            }
                        } catch (error) {
                            // Если произошла сетевая ошибка или ошибка в Fetch API
                            console.error('Ошибка при оновленні профілю (сеть/Fetch API):', error);
                            alert('Помилка при оновленні профілю. Проверьте подключение к интернету.');
                        }
                    });

                    // Обработчики для загрузки и удаления аватара
                    uploadAvatarBtn.addEventListener('click', () => {
                        avatarInput.click();
                    });

                    avatarInput.addEventListener('change', async (event) => {
                        const file = event.target.files[0];
                        if (!file) return;

                        const formData = new FormData();
                        formData.append('photo', file);

                        console.log('Загрузка аватара: выбран файл', file.name); // Лог для отладки

                        try {
                            const response = await fetch(`/profile/upload-photo`, {
                                method: 'POST',
                                body: formData, // FormData отправляется без заголовка 'Content-Type', браузер его устанавливает сам
                                credentials: 'include'
                            });
                            const data = await response.json();

                            if (response.ok) {
                                profileAvatar.src = data.photoPath;
                                alert(data.message);
                                updateDeleteButtonVisibility();
                            } else {
                                console.error('Ошибка от сервера при загрузке фото:', data.message || response.statusText);
                                alert('Помилка: ' + (data.message || 'Неизвестная ошибка при загрузке фото'));
                            }
                        } catch (error) {
                            console.error('Помилка завантаження фото (сеть/Fetch API):', error);
                            alert('Помилка завантаження фото. Проверьте подключение.');
                        }
                    });

                    document.addEventListener('click', async (event) => {
                        if (event.target.id === 'delete-avatar-btn') {
                            if (!confirm('Ви впевнені, що хочете видалити фото профілю?')) {
                                return;
                            }

                            console.log('Попытка удаления аватара.'); // Лог для отладки

                            try {
                                const response = await fetch(`/profile/delete-photo`, {
                                    method: 'DELETE',
                                    credentials: 'include'
                                });
                                const data = await response.json();
                                if (response.ok) {
                                    profileAvatar.src = data.photoPath; // Предполагается, что сервер вернет путь к дефолтному аватару
                                    alert(data.message);
                                    updateDeleteButtonVisibility();
                                } else {
                                    console.error('Ошибка от сервера при удалении фото:', data.message || response.statusText);
                                    alert('Помилка: ' + (data.message || 'Неизвестная ошибка при удалении фото'));
                                }
                            } catch (error) {
                                console.error('Помилка при видаленні фото (сеть/Fetch API):', error);
                                alert('Сталася помилка при видаленні фото. Проверьте подключение.');
                            }
                        }
                    });
                });
            </script>
</body>

</html>